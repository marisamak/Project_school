import asyncio
import random
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.filters import Command

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = "8119842007:AAHK5nFjmAqxT7Fv1WDjj1LTAlsuFqSb3Yo"

THEORY_FILE = "theory_.json"  # –¢–µ–æ—Ä–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON)
TASKS_FILE = "tasks.json"  # –ó–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON)
TESTS_FILE = "tests.json"  # –¢–µ—Å—Ç—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_tasks = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_tests = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_reminders = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)
user_states = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
with open(THEORY_FILE, "r", encoding="utf-8") as f:
    theory_data = json.load(f)

with open(TASKS_FILE, "r", encoding="utf-8") as f:
    tasks = json.load(f)

with open(TESTS_FILE, "r", encoding="utf-8") as f:
    tests = json.load(f)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def get_random_task():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É."""
    return random.choice(tasks)


def check_answer(task, user_answer):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    correct_answer = task.get("answer")
    return str(user_answer).strip() == str(correct_answer).strip()


def get_random_test():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç."""
    return random.choice(tests)


def get_random_theory():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Ç–µ–æ—Ä–∏–∏."""
    return random.choice(theory_data)


async def schedule_reminder(user_id, remind_time):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    now = datetime.now()
    delay = (remind_time - now).total_seconds()
    await asyncio.sleep(delay)

    if user_id in user_reminders and user_reminders[user_id] == remind_time:
        del user_reminders[user_id]
        await bot.send_message(
            user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É!üöÄ"
        )


# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@router.message(Command("start"))
async def start_command(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìò –¢–µ–æ—Ä–∏—è")],
            [KeyboardButton(text="üìö –ó–∞–¥–∞—á–∏")],
            [KeyboardButton(text="üìä –¢–µ—Å—Ç—ã")],
            [KeyboardButton(text="üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")],
            [KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
        ],
        resize_keyboard=True,
    )

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ —Ñ–∏–∑–∏–∫–µ. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:",
        reply_markup=keyboard,
    )


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


@router.message(lambda message: message.text == "üìò –¢–µ–æ—Ä–∏—è")
async def send_theory_menu(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º."""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for topic in theory_data["—Ç–µ–º—ã"]:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
        button = InlineKeyboardButton(
            text=f"{topic['–Ω–æ–º–µ—Ä']}. {topic['–Ω–∞–∑–≤–∞–Ω–∏–µ']}",
            callback_data=f"topic_{topic['–Ω–æ–º–µ—Ä']}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º—ã
        )
        keyboard.inline_keyboard.append([button])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard)


@router.callback_query(lambda callback: callback.data.startswith("topic_"))
async def handle_topic_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–º—ã –∏–∑ callback_data
    topic_number = int(callback.data.split("_")[1])

    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
    selected_topic = None
    for topic in theory_data["—Ç–µ–º—ã"]:
        if topic["–Ω–æ–º–µ—Ä"] == topic_number:
            selected_topic = topic
            break

    if selected_topic:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–º–µ
        response = f"üìò <b>{selected_topic['–Ω–∞–∑–≤–∞–Ω–∏–µ']}</b>\n\n{selected_topic['—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ']}"

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if "–∏—Å—Ç–æ—Ä–∏—è" in selected_topic:
            response += f"\n\n<b>–ò—Å—Ç–æ—Ä–∏—è:</b>\n{selected_topic['–∏—Å—Ç–æ—Ä–∏—è']}"
        if "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ" in selected_topic:
            response += f"\n\n<b>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</b>\n" + "\n".join(selected_topic["–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ"])
        if "–ø—Ä–∏–º–µ—Ä—ã" in selected_topic:
            response += f"\n\n<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n" + "\n".join(selected_topic["–ø—Ä–∏–º–µ—Ä—ã"])
#        if "—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞" in selected_topic:
#            response += f"\n\n<b>–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</b>\n" + "\n".join(selected_topic["—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞"])
        if "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ" in selected_topic:
            response += f"\n\n<b>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ:</b>\n" + "\n".join(selected_topic["–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ"])
        if "–ø–æ–¥—Ç–µ–º—ã" in selected_topic:
            for subtopic in selected_topic["–ø–æ–¥—Ç–µ–º—ã"]:
                response += f"\n\n<b>{subtopic['–Ω–∞–∑–≤–∞–Ω–∏–µ']}:</b>\n{subtopic['—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ']}"

        await callback.message.answer(response, parse_mode="HTML")
    else:
        await callback.message.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    await callback.answer()


@router.message(lambda message: message.text == "üìö –ó–∞–¥–∞—á–∏")
async def send_task(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–¥–∞—á—É."""
    task = get_random_task()
    user_tasks[message.from_user.id] = task  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        f"üìö <b>–ó–∞–¥–∞—á–∞:</b>\n{task['question']}\n\n‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç, —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º. –ü—Ä–∏–º–µ—Ä: 42 –Ω. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∏ –æ–Ω–∏ –ø–∏—à—É—Ç—Å—è —Å–æ —Å—Ç—Ä–æ—á–Ω–æ–π –±—É–∫–≤—ã!",
        parse_mode="HTML",
    )


@router.message(lambda message: message.text == "üìä –¢–µ—Å—Ç—ã")
async def send_test(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    test = get_random_test()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'options' –∏ 'question'
    if not test or "question" not in test or "options" not in test:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tests[message.from_user.id] = test

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=option)] for option in test["options"]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

    await message.answer(
        f"üìä <b>{test['question']}</b>", reply_markup=keyboard, parse_mode="HTML"
    )


@router.message(lambda message: message.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def set_reminder(message: types.Message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    user_states[message.from_user.id] = "setting_reminder"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú. –ù–∞–ø—Ä–∏–º–µ—Ä: 14:30"
    )


@router.message(lambda message: message.text == "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
async def send_links(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏."""
    links = [
        "https://fipi.ru/ege",
        "https://ege.sdamgia.ru/",
        "https://neznaika.info/",
        "https://neofamily.ru/fizika/smart-directory",
        "https://mizenko23.ru/wp-content/uploads/2019/04/jakovlev_fizika-polnyj_kurs_podgotovki_k_egeh.pdf",
        "https://thenewschool.ru/trainer/physics",
        "https://3.shkolkovo.online/catalog?SubjectId=4",

    ]
    links_text = "\n".join([f"üîó <a href=\"{link}\">{link}</a>" for link in links])
    await message.answer(f"–í–æ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n{links_text}", parse_mode="HTML")


@router.message()
async def process_user_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞—á–∏, —Ç–µ—Å—Ç—ã –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    user_id = message.from_user.id

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏–ª–∏ –∑–∞–¥–∞—á–∏)
    main_menu = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìò –¢–µ–æ—Ä–∏—è")],
            [KeyboardButton(text="üìö –ó–∞–¥–∞—á–∏")],
            [KeyboardButton(text="üìä –¢–µ—Å—Ç—ã")],
            [KeyboardButton(text="üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")],
            [KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
        ],
        resize_keyboard=True,
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if user_states.get(user_id) == "setting_reminder":
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            remind_time = datetime.strptime(message.text.strip(), "%H:%M").time()
            now = datetime.now()
            remind_datetime = datetime.combine(now.date(), remind_time)

            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            if remind_datetime < now:
                remind_datetime += timedelta(days=1)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
            user_reminders[user_id] = remind_datetime
            await message.answer(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_datetime.strftime('%H:%M')}.")
            asyncio.create_task(schedule_reminder(user_id, remind_datetime))

            # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∂–∏–º–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            del user_states[user_id]

        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú. –ù–∞–ø—Ä–∏–º–µ—Ä: 14:30"
            )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ—Å—Ç
    if user_id in user_tests:
        test = user_tests[user_id]
        user_answer = message.text.strip()

        if user_answer == test["answer"]:
            await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
        else:
            await message.answer(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{test['answer']}</b>",
                parse_mode="HTML",
            )

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        del user_tests[user_id]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:", reply_markup=main_menu)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∑–∞–¥–∞—á—É
    if user_id in user_tasks:
        task = user_tasks[user_id]
        user_answer = message.text.strip()

        if check_answer(task, user_answer):
            await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
            del user_tasks[user_id]  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Ä–µ—à–µ–Ω–∞
        else:
            await message.answer(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!\n\n‚ÑπÔ∏è –ü–æ–¥—Å–∫–∞–∑–∫–∞: –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è."
            )
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    await message.answer(
        "‚ÑπÔ∏è –í—ã –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É –∏–ª–∏ —Ç–µ—Å—Ç. –ù–∞–∂–º–∏—Ç–µ 'üìö –ó–∞–¥–∞—á–∏' –∏–ª–∏ 'üìä –¢–µ—Å—Ç—ã', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=main_menu,
    )


# === –ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ ===
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())