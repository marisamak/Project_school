import asyncio
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8119842007:AAFuBm7Vyw8PYIMdEegV6R6YKw0xycF81JU"

THEORY_FILE = "theory_.json"  # –§–∞–π–ª —Å —Ç–µ–æ—Ä–∏–µ–π
TASKS_FILE = "tasks.json"  # –§–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏
TESTS_FILE = "tests.json"  # –§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_tests = {}
user_states = {}
user_reminders = {}
user_test_progress = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ—Å—Ç–∞
user_tasks = {}  # –•—Ä–∞–Ω–∏—Ç –∑–∞–¥–∞—á–∏ –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

STATE_TASKS = "tasks"
STATE_TESTS = "tests"
STATE_NONE = "none"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with open(THEORY_FILE, "r", encoding="utf-8") as f:
    theory_data = json.load(f)

with open("tasks.json", "r", encoding="utf-8") as f:
    tasks_data = json.load(f)

with open(TESTS_FILE, "r", encoding="utf-8") as f:
    tests_data = json.load(f)["tests"]  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def check_answer(test, user_answer):
    try:
        user_answer_index = test["options"].index(user_answer)
        return user_answer_index in test["answer"]
    except ValueError:
        return False

def get_topics():
    return [test["topic"] for test in tests_data]

def get_tests_by_topic(topic):
    for test in tests_data:
        if test["topic"] == topic:
            return test["questions"]
    return []  # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

async def schedule_reminder(user_id, remind_time):
    now = datetime.now()
    delay = (remind_time - now).total_seconds()
    await asyncio.sleep(delay)
    if user_id in user_reminders and user_reminders[user_id] == remind_time:
        del user_reminders[user_id]
        await bot.send_message(user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í—Ä–µ–º—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É! üöÄ")

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@router.message(Command("start"))
async def start_command(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìò –¢–µ–æ—Ä–∏—è")],
            [KeyboardButton(text="üìö –ó–∞–¥–∞—á–∏")],
            [KeyboardButton(text="üìä –¢–µ—Å—Ç—ã")],
            [KeyboardButton(text="üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")],
            [KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
        ],
        resize_keyboard=True,
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ —Ñ–∏–∑–∏–∫–µ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@router.message(lambda message: message.text == "üìò –¢–µ–æ—Ä–∏—è")
async def send_theory_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for topic in theory_data["—Ç–µ–º—ã"]:
        button = InlineKeyboardButton(text=f"{topic['–Ω–æ–º–µ—Ä']}. {topic['–Ω–∞–∑–≤–∞–Ω–∏–µ']}", callback_data=f"topic_{topic['–Ω–æ–º–µ—Ä']}")
        keyboard.inline_keyboard.append([button])
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=keyboard)

@router.callback_query(lambda callback: callback.data.startswith("topic_"))
async def handle_topic_selection(callback: CallbackQuery):
    topic_number = int(callback.data.split("_")[1])
    selected_topic = next((t for t in theory_data["—Ç–µ–º—ã"] if t["–Ω–æ–º–µ—Ä"] == topic_number), None)
    if selected_topic:
        response = f"üìò <b>{selected_topic['–Ω–∞–∑–≤–∞–Ω–∏–µ']}</b>\n\n{selected_topic['—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ']}"
        await callback.message.answer(response, parse_mode="HTML")
    else:
        await callback.message.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await callback.answer()

@router.message(lambda message: message.text == "üìö –ó–∞–¥–∞—á–∏")
async def send_task_topics(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = STATE_TASKS  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–¥–∞—á–∏

    topics = set(task["topic"] for task in tasks_data["tasks"])
    keyboard = InlineKeyboardBuilder()
    for topic in topics:
        keyboard.button(text=topic, callback_data=f"task_topic_{topic}")
    keyboard.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –∑–∞–¥–∞—á:", reply_markup=keyboard.as_markup())


@router.callback_query(lambda callback: callback.data.startswith("task_topic_"))
async def handle_task_topic_selection(callback: CallbackQuery):
    topic = callback.data.replace("task_topic_", "")
    user_id = callback.from_user.id
    tasks = [task for task in tasks_data["tasks"] if task["topic"] == topic]
    if not tasks:
        await callback.message.answer("‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    user_tasks[user_id] = {"tasks": tasks, "current_task_index": 0}
    user_states[user_id] = STATE_TASKS  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–¥–∞—á–∏
    await send_next_task(callback.message, user_id)
    await callback.answer()


async def send_next_task(message: types.Message, user_id: int):
    if user_id not in user_tasks:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    user_state = user_tasks[user_id]
    tasks = user_state["tasks"]
    index = user_state["current_task_index"]

    if index >= len(tasks):
        await message.answer("üéâ –¢—ã —Ä–µ—à–∏–ª –≤—Å–µ –∑–∞–¥–∞—á–∏!")
        del user_tasks[user_id]
        return

    task = tasks[index]
    await message.answer(f"üìö <b>–ó–∞–¥–∞—á–∞:</b>\n{task['question']}", parse_mode="HTML")

@router.message(lambda message: message.text == "üìä –¢–µ—Å—Ç—ã")
async def send_test_topics(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = STATE_TESTS  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—Å—Ç—ã

    topics = get_topics()
    if not topics:
        await message.answer("–¢–µ—Å—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for index, topic in enumerate(topics):
        button = InlineKeyboardButton(text=topic, callback_data=f"test_topic_{index}")
        keyboard.inline_keyboard.append([button])

    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É —Ç–µ—Å—Ç–∞:", reply_markup=keyboard)


@router.callback_query(lambda callback: callback.data.startswith("test_topic_"))
async def handle_test_topic_selection(callback: CallbackQuery):
    topic_index = int(callback.data.replace("test_topic_", ""))
    topics = get_topics()

    if topic_index < 0 or topic_index >= len(topics):
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    topic = topics[topic_index]
    tests = get_tests_by_topic(topic)

    if not tests:
        await callback.message.answer("‚ùå –í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_test_progress[callback.from_user.id] = {
        "topic": topic,
        "tests": tests,
        "current_question_index": 0
    }
    user_states[callback.from_user.id] = STATE_TESTS  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç—ã

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_next_test_question(callback.message, callback.from_user.id)
    await callback.answer()


async def send_next_test_question(message: types.Message, user_id: int):
    if user_id not in user_test_progress:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    progress = user_test_progress[user_id]
    tests = progress["tests"]
    current_index = progress["current_question_index"]

    if current_index >= len(tests):
        await message.answer("üéâ –¢—ã –ø—Ä–æ—à–µ–ª –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ!")
        del user_test_progress[user_id]
        return

    test = tests[current_index]
    user_tests[user_id] = test

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    if "options" not in test or not test["options"]:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: —É —Ç–µ—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤. –í–æ–ø—Ä–æ—Å: {test['question']}")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    await message.answer(f"üìä <b>–í–æ–ø—Ä–æ—Å {current_index + 1}:</b>\n{test['question']}", parse_mode="HTML")

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=option, callback_data=f"answer_{i}")] for i, option in enumerate(test["options"])
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:", reply_markup=keyboard)

@router.callback_query(lambda callback: callback.data.startswith("answer_"))
async def handle_answer_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_tests:
        await callback.answer("–û—à–∏–±–∫–∞! –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    test = user_tests[user_id]
    user_answer_index = int(callback.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞

    if user_answer_index in test["answer"]:
        await callback.message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        correct_answers = ", ".join([test["options"][i] for i in test["answer"]])
        await callback.message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answers}</b>", parse_mode="HTML")

    del user_tests[user_id]

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    if user_id in user_test_progress:
        user_test_progress[user_id]["current_question_index"] += 1
        await send_next_test_question(callback.message, user_id)

    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

@router.message(lambda message: message.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def set_reminder(message: types.Message):
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    user_states[message.from_user.id] = "setting_reminder"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        "‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú. –ù–∞–ø—Ä–∏–º–µ—Ä: 14:30"
    )


@router.message(lambda message: message.text == "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
async def send_links(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.
    links = [
        "https://fipi.ru/ege",
        "https://ege.sdamgia.ru/",
        "https://neznaika.info/",
        "https://neofamily.ru/fizika/smart-directory",
        "https://mizenko23.ru/wp-content/uploads/2019/04/jakovlev_fizika-polnyj_kurs_podgotovki_k_egeh.pdf",
        "https://thenewschool.ru/trainer/physics",
        "https://3.shkolkovo.online/catalog?SubjectId=4",

    ]
    links_text = "\n".join([f"üîó <a href=\"{link}\">{link}</a>" for link in links])
    await message.answer(f"–í–æ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n{links_text}", parse_mode="HTML")

# –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
async def handle_task_answer(message: types.Message):
    user_id = message.from_user.id
    user_state = user_tasks.get(user_id)

    if user_state is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á–∏
        await message.answer("‚ùå –¢—ã –Ω–µ —Ä–µ—à–∞–µ—à—å –∑–∞–¥–∞—á–∏ —Å–µ–π—á–∞—Å. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        return

    tasks = user_state["tasks"]
    index = user_state["current_task_index"]

    if index >= len(tasks):
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        await message.answer("üéâ –¢—ã —Ä–µ—à–∏–ª –≤—Å–µ –∑–∞–¥–∞—á–∏!")
        del user_tasks[user_id]  # –£–¥–∞–ª—è–µ–º –∏–∑ user_tasks
        del user_states[user_id]  # –£–¥–∞–ª—è–µ–º –∏–∑ user_states
        return

    task = tasks[index]
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_answer = float(message.text.strip())
        if user_answer == task["answer"]:
            await message.answer(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n<b>–†–µ—à–µ–Ω–∏–µ:</b> {task['solution']}", parse_mode="HTML")
        else:
            await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}\n\n<b>–†–µ—à–µ–Ω–∏–µ:</b> {task['solution']}", parse_mode="HTML")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç.")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
    user_tasks[user_id]["current_task_index"] += 1
    await send_next_task(message, user_id)


async def handle_test_answer(message: types.Message):
    user_id = message.from_user.id
    user_test_progress = user_test_progress.get(user_id)

    if user_test_progress is None:
        await message.answer("‚ùå –¢—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—à—å —Ç–µ—Å—Ç—ã. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        return

    tests = user_test_progress["tests"]
    index = user_test_progress["current_question_index"]

    if index >= len(tests):
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        await message.answer("üéâ –¢—ã –ø—Ä–æ—à–µ–ª –≤—Å–µ —Ç–µ—Å—Ç—ã!")
        del user_test_progress[user_id]  # –£–¥–∞–ª—è–µ–º –∏–∑ user_test_progress
        del user_states[user_id]  # –£–¥–∞–ª—è–µ–º –∏–∑ user_states
        return

    test = tests[index]
    user_answer = message.text.strip().lower()

    if user_answer == test["correct_answer"]:
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
    else:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {test['correct_answer']}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    user_test_progress[user_id]["current_question_index"] += 1
    await send_next_test_question(message, user_id)


@router.message()
async def process_user_message(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_state = user_states.get(user_id, STATE_NONE)

    if user_state == STATE_TASKS:
        await handle_task_answer(message)
    elif user_state == STATE_TESTS:
        await handle_test_answer(message)
    elif user_state == "setting_reminder":
        await set_reminder(message)
    else:
        await message.answer("‚ÑπÔ∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")


async def handle_other_messages(message: types.Message):
    user_id = message.from_user.id

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
    if message.text.lower() == "/start":
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–µ–Ω—é
        await start_command(message)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º

    elif message.text.lower() == "üìò –¢–µ–æ—Ä–∏—è":
        await send_theory_menu(message)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–æ—Ä–∏–∏

    elif message.text.lower() == "üìö –ó–∞–¥–∞—á–∏":
        await send_task_topics(message)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á

    elif message.text.lower() == "üìä –¢–µ—Å—Ç—ã":
        await send_test_topics(message)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤

    elif message.text.lower() == "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏":
        await send_links(message)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫

    elif message.text.lower() == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        await set_reminder(message)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

    else:
        await message.answer("‚ÑπÔ∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")


async def set_reminder(message: types.Message):
    user_id = message.from_user.id
    try:
        remind_time = datetime.strptime(message.text.strip(), "%H:%M").time()
        now = datetime.now()
        remind_datetime = datetime.combine(now.date(), remind_time)

        if remind_datetime < now:
            remind_datetime += timedelta(days=1)

        user_reminders[user_id] = remind_datetime
        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_datetime.strftime('%H:%M')}.")
        asyncio.create_task(schedule_reminder(user_id, remind_datetime))

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_states[user_id]
    except ValueError:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30).")

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    main_menu_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìò –¢–µ–æ—Ä–∏—è")],
            [KeyboardButton(text="üìö –ó–∞–¥–∞—á–∏")],
            [KeyboardButton(text="üìä –¢–µ—Å—Ç—ã")],
            [KeyboardButton(text="üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")],
            [KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
        ],
        resize_keyboard=True,
    )

    await message.answer("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)

# === –ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ ===
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())